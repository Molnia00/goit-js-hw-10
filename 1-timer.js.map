{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["\n\n\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst inputOfDATE = document.querySelector('#datetime-picker');\nconst timerContainer = document.querySelector('.timer');\nconst fieldContainer = document.querySelector('.field');\nconst buttonForDate = document.querySelector('[data-start]');\n\nconst dataSecond = document.querySelector('[data-seconds]');\nconst dataMinute = document.querySelector('[data-minutes]');\nconst dataHour = document.querySelector('[data-hours]');\nconst dataDay = document.querySelector('[data-days]');\n\n\nlet userSelectedDate = null;\nlet stopCount = null;\nbuttonForDate.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n    minuteIncrement: 1,\n    dateFormat: \"y-m-d\",\n    onClose(selectedDates) {\n        console.log(selectedDates[0]);\n        const selectedDate = selectedDates[0];\n        \n        if (selectedDate < new Date()) {\n            alert('Please choose a date in the future');\n            buttonForDate.disabled = true;\n        } else {\n            userSelectedDate = selectedDate;\n            buttonForDate.disabled = false;\n        }\n    },\n};\n\nflatpickr(\"#datetime-picker\", options);\n\n\n\nbuttonForDate.addEventListener(\"click\",startCount )\n\nfunction startCount() {\n    stopCount = setInterval(updateCount, 1000);\n}\n\nfunction updateCount(){\n    const now = new Date();\n    const timeLeft = userSelectedDate - now;\n    if (timeLeft < 0) {\n        clearInterval(stopCount);\n        return\n    }\n\n    const countTime = convertMs(timeLeft);\n    console.log(countTime);\n    dataDay.innerHTML = countTime.days; \n    dataSecond.innerHTML = countTime.seconds;\n    dataMinute.innerHTML = countTime.minutes;\n    dataHour.innerHTML = countTime.hours;\n    \n}\n\n\n\n\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n\n"],"names":["buttonForDate","dataSecond","dataMinute","dataHour","dataDay","userSelectedDate","stopCount","options","selectedDates","selectedDate","flatpickr","startCount","updateCount","timeLeft","countTime","convertMs","ms","days","hours","minutes","seconds"],"mappings":"oFASoB,SAAS,cAAc,kBAAkB,EACtC,SAAS,cAAc,QAAQ,EAC/B,SAAS,cAAc,QAAQ,EACtD,MAAMA,EAAgB,SAAS,cAAc,cAAc,EAErDC,EAAa,SAAS,cAAc,gBAAgB,EACpDC,EAAa,SAAS,cAAc,gBAAgB,EACpDC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAU,SAAS,cAAc,aAAa,EAGpD,IAAIC,EAAmB,KACnBC,EAAY,KAChBN,EAAc,SAAW,GAEzB,MAAMO,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACf,gBAAiB,EACjB,WAAY,QACZ,QAAQC,EAAe,CACnB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EAC5B,MAAMC,EAAeD,EAAc,CAAC,EAEhCC,EAAe,IAAI,MACnB,MAAM,oCAAoC,EAC1CT,EAAc,SAAW,KAEzBK,EAAmBI,EACnBT,EAAc,SAAW,GAEhC,CACL,EAEAU,EAAU,mBAAoBH,CAAO,EAIrCP,EAAc,iBAAiB,QAAQW,CAAY,EAEnD,SAASA,GAAa,CAClBL,EAAY,YAAYM,EAAa,GAAI,CAC7C,CAEA,SAASA,GAAa,CAElB,MAAMC,EAAWR,EADL,IAAI,KAEhB,GAAIQ,EAAW,EAAG,CACd,cAAcP,CAAS,EACvB,MACH,CAED,MAAMQ,EAAYC,EAAUF,CAAQ,EACpC,QAAQ,IAAIC,CAAS,EACrBV,EAAQ,UAAYU,EAAU,KAC9Bb,EAAW,UAAYa,EAAU,QACjCZ,EAAW,UAAYY,EAAU,QACjCX,EAAS,UAAYW,EAAU,KAEnC,CAMA,SAASC,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}